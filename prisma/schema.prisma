generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  STAFF
}

enum OrderStatus {
  OPEN
  PAID
  CANCELLED
}

enum PaymentType {
  CASH
  CARD
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum ShopType {
  RESTAURANT
  PHARMACY
}

enum SubscriptionPlan {
  ONE_MONTH
  SIX_MONTHS
  ONE_YEAR
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Shop {
  id                 String           @id @default(uuid())
  name               String
  branch_name        String?
  type               ShopType
  subscription_plan  SubscriptionPlan
  subscription_start DateTime         @default(now())
  subscription_end   DateTime
  is_active          Boolean          @default(true)
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt

  // relations
  users      User[]     @relation("ShopUsers")
  settings   Setting?
  categories Category[]
  products   Product[]
  orders     Order[]

  @@map("shop")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       Role
  shop_id    String?
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relations
  shop   Shop?   @relation("ShopUsers", fields: [shop_id], references: [id], onDelete: Cascade)
  orders Order[] @relation("UserOrders")

  @@index([is_deleted])
  @@map("user")
}

model Category {
  id         String   @id @default(uuid())
  name       String
  image      String?
  shop_id    String
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relations
  shop     Shop      @relation(fields: [shop_id], references: [id], onDelete: Cascade)
  products Product[]

  @@index([name])
  @@index([is_deleted])
  @@map("category")
}

model Product {
  id           String   @id @default(uuid())
  name         String
  price        Decimal
  image        String?
  barcode      String?  @unique
  category_id  String
  shop_id      String
  is_available Boolean  @default(true)
  is_deleted   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // relations
  category    Category?   @relation(fields: [category_id], references: [id], onDelete: Restrict)
  shop        Shop        @relation(fields: [shop_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]

  // Shop type specific relations
  pharmacy_product_details   PharmacyProductDetails?
  restaurant_product_details RestaurantProductDetails?

  @@index([category_id])
  @@index([is_available])
  @@index([is_deleted])
  @@index([barcode])
  @@map("product")
}

model PharmacyProductDetails {
  id            String       @id @default(uuid())
  product_id    String       @unique
  dosage        String?
  form          String?
  pack_size     String?
  manufacturer  String
  description   String?
  discount      Decimal?
  discount_type DiscountType @default(PERCENTAGE)
  stock         Int?
  in_stock      Boolean?
  expiry_date   DateTime?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt

  // relations
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("pharmacy_product_details")
}

model RestaurantProductDetails {
  id               String   @id @default(uuid())
  product_id       String   @unique
  description      String?
  preparation_time Int?
  is_vegetarian    Boolean  @default(false)
  is_vegan         Boolean  @default(false)
  is_spicy         Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // relations
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("restaurant_product_details")
}

model Order {
  id               String      @id @default(uuid())
  order_number     String      @unique
  sub_total_amount Decimal
  tax_amount       Decimal?
  total_amount     Decimal
  status           OrderStatus
  payment_type     PaymentType
  note             String?
  created_by       String
  shop_id          String
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  // relations
  user        User        @relation("UserOrders", fields: [created_by], references: [id], onDelete: Restrict)
  shop        Shop        @relation(fields: [shop_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]

  @@index([created_by])
  @@index([status])
  @@index([created_at])
  @@map("order")
}

model OrderItem {
  id              String   @id @default(uuid())
  order_id        String
  product_id      String
  quantity        Int
  price           Decimal
  discount_amount Decimal? @default(0)
  final_price     Decimal

  // relations
  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Restrict)

  @@index([order_id])
  @@index([product_id])
  @@map("order_item")
}

model Setting {
  id                   String   @id @default(uuid())
  shop_id              String   @unique
  display_name         String
  address              String?
  phone_number         String?
  email                String
  logo_url             String?
  receipt_header_text  String?
  receipt_footer_text  String?
  show_logo_on_receipt Boolean  @default(true)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  // relations
  shop Shop @relation(fields: [shop_id], references: [id], onDelete: Cascade)

  @@map("setting")
}
